import * as z from 'zod'

/**
 * Interfaces
 */
export interface Item {
  itemId: string
  name: string
  quantity: number
}

/**
 * Enums
 */
export enum orderStatus {
  'Driver received' = 'Driver received',
  'Driver on the way' = 'Driver on the way',
  'Driver delivered to post office' = 'Driver delivered to post office',
  'Delivered' = 'Delivered',
  'Cancelled' = 'Cancelled',
}

export enum subscriptionPlans {
  'Bronze' = 'Bronze',
  'Silver' = 'Silver',
  'Gold' = 'Gold',
  'Platinum' = 'Platinum',
}

/**
 * Types
 */

export const userSchema = z.object({
  _id: z.string(),
  username: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phoneNumber: z.string(),
  address: z.string(),
  suiteNo: z.string().optional(),
  city: z.string(),
  postalCode: z.string(),
  password: z.string(),
  isActive: z.boolean(),
})

export type User = z.infer<typeof userSchema>

export const addressSchema = z.object({
  _id: z.string().optional(), // Auto-generated in the server
  user: z.string().optional(), // Auto-generated in the server
  name: z.string(),
  phoneNumber: z.string(),
  address: z.string(),
  unit: z.string().optional(),
  city: z.string(),
  province: z.string().default('Ontario'),
  country: z.string().default('Canada'),
  postalCode: z.string().refine((value) => /^\w\d\w\s?\d\w\d$/.test(value), {
    message: 'Invalid postal code format',
  }),
  instructions: z.string().optional(),
  isPrimary: z.boolean().default(false).optional(),
})
export type Address = z.infer<typeof addressSchema>

const ConfirmedOrdersCollectionResponseSchema = z.object({
  orderId: z.string().optional(), // System-generated
  orderDate: z.date(),
  orderStatus: z.nativeEnum(orderStatus),
  invoiceNumber: z.string().optional(),
  discount: z
    .object({
      promoCode: z.string(),
      expireDate: z.string(),
      discountPercentage: z.number(),
    })
    .optional(),
  orderDetails: z.object({
    user: userSchema, // auto-generated
    totalCost: z.number(),
    pickupDate: z.date(),
    pickupMethod: z.enum(['Direct Handoff', 'Leave on Doorstep']),
    totalPackages: z.number(),
    extraPackages: z.number(),
    promoCode: z.string().optional(),
    pickupDetails: addressSchema,
  }),
  subscription: z.object({
    type: z.nativeEnum(subscriptionPlans),
    expiryDate: z.date(),
    price: z.number(),
  }),
})

const ConfirmedOrdersCollectionRequestSchema = z.object({
  orderId: z.string().optional(), // System-generated
  orderDate: z.date(),
  orderStatus: z.nativeEnum(orderStatus),
  invoiceNumber: z.string().optional(), // system-generated by Stripe
  discount: z
    .object({
      promoCode: z.string(),
      expireDate: z.string(),
      discountPercentage: z.number(),
    })
    .optional(),
  orderDetails: z.object({
    user: z.string().optional(), // ID relating to the user
    totalCost: z.number(),
    pickupDate: z.date(),
    pickupMethod: z.enum(['Direct Handoff', 'Leave on Doorstep']),
    totalPackages: z.number(),
    extraPackages: z.number(),
    promoCode: z.string().optional(),
    pickupDetails: z.string().optional(), // ID relating to the pickup address
  }),
  subscription: z.object({
    type: z.nativeEnum(subscriptionPlans),
    expiryDate: z.date(),
    price: z.number(),
  }),
})

const ConfirmedOrdersCollectionSchema = z.object({
  orderId: z.string().optional(), // System-generated
  orderDate: z.date(),
  orderStatus: z.nativeEnum(orderStatus),
  invoiceNumber: z.string().optional(),
  discount: z
    .object({
      promoCode: z.string(),
      expireDate: z.string(),
      discountPercentage: z.number(),
    })
    .optional(),
  orderDetails: z.object({
    user: z.string().optional(), // auto-generated
    totalCost: z.number(),
    pickupDate: z.date(),
    pickupMethod: z.enum(['Direct Handoff', 'Leave on Doorstep']),
    totalPackages: z.number(),
    extraPackages: z.number(),
    promoCode: z.string().optional(),
    pickupDetails: addressSchema,
  }),
  subscription: z.object({
    type: z.nativeEnum(subscriptionPlans),
    expiryDate: z.date(),
    price: z.number(),
  }),
})

export type Order = z.infer<typeof ConfirmedOrdersCollectionSchema>
export type OrderResponse = z.infer<
  typeof ConfirmedOrdersCollectionResponseSchema
>
export type OrderRequest = z.infer<
  typeof ConfirmedOrdersCollectionRequestSchema
>
